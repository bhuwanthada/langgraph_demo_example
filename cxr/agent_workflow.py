import os

from dotenv import load_dotenv
from typing import List, TypedDict
from langchain_core.messages import BaseMessage, HumanMessage, AIMessage
from langgraph.graph import StateGraph, START, END
from langchain_groq.chat_models import ChatGroq
from langgraph.checkpoint.memory import MemorySaver

from cxr.langgraph_tools import (generate_radiologist_report,
                                 get_similarity_search_for_given_image)
load_dotenv()


model = ChatGroq(
        temperature=0.0,
        model_name="llama3-8b-8192",
        api_key=os.getenv("GROQ_API", None)
    )


# --- 1. Define State for Short-Term Memory ---
class AgentState(TypedDict):
    """
    Represents the state of a single conversation thread for a user.
    This is the short-term memory.
    """
    messages: List[BaseMessage]
    similarity_search_content: str | None
    radiologist_report_content: str | None
    current_number: int | None
    square_result: int | None
    error_message: str | None
    current_message: str | None


# --- 2. Define Functions (Agent Tools) ---

def similarity_search_agent(state: AgentState):
    current_message = state.get("current_message", None)
    if not current_message:
        raise ValueError("Simulated network issue: similarity_search_agent failed due to not getting current message.")
    similarity_search_result = get_similarity_search_for_given_image(current_message)
    thread_id = get_current_thread_id()
    if thread_id:
        raise ValueError("Intentional error generated by agent.")

    print(f"Agent similar_search (Thread ID: {thread_id}): similarity_search result:  {similarity_search_result}")
    return {"current_message": similarity_search_result,
            "messages": state["messages"] + [AIMessage(f"similarity_search_agent result {similarity_search_result}. Current message: {similarity_search_result}")],
            "error_message": None,
            "similarity_search_content": similarity_search_result
            }


def generate_radiologist_report_agent(state: AgentState):
    similarity_search = state.get("current_message", None)
    if not similarity_search:
        raise ValueError("Simulated network issue: generate_radiologist_report_agent failed due to not getting "
                         "current message.")
    # radiologist_report = generate_radiologist_report({"similarity_search":current_message})
    radiologist_report = generate_radiologist_report({"similarity_search":similarity_search})
    thread_id = get_current_thread_id()

    print(f"Agent radiologist_report generation (Thread ID: {thread_id}): similarity_search result:  {radiologist_report}")
    return {"current_message": radiologist_report,
            "messages": state["messages"] + [AIMessage(
                f"generate_radiologist_report_agent result {radiologist_report}. Current message: {radiologist_report}")],
            "error_message": None,
            "radiologist_report_content": radiologist_report
            }

# --- Helper for current thread_id (for print statements) ---
_current_thread_id = None


def set_current_thread_id(thread_id: str):
    global _current_thread_id
    _current_thread_id = thread_id


def get_current_thread_id():
    return _current_thread_id

# Initialize a checkpointer for short-term memory


def compile_agent_workflow():

    # --- 4. Define the Graph ---
    memory = MemorySaver()
    graph_builder = StateGraph(AgentState)
    graph_builder.add_node("similarity_search_agent", similarity_search_agent)
    graph_builder.add_node("generate_radiologist_report_agent", generate_radiologist_report_agent)
    graph_builder.add_edge(START, "similarity_search_agent")
    graph_builder.add_edge("similarity_search_agent", "generate_radiologist_report_agent")
    graph_builder.add_edge("generate_radiologist_report_agent", END)

    # Compile the graph, passing the checkpointer here
    graph = graph_builder.compile(checkpointer=memory)
    return graph, memory

